import { NextResponse, NextRequest } from 'next/server';
import { z } from 'zod';
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/auth";
import { prisma } from '@/lib/prisma'; // Correct: Use named import for prisma
import { RecipeSource } from '@prisma/client';

// Zod schema for the incoming recipe data - Updated for structured ingredients
const saveGeneratedRecipeSchema = z.object({
  title: z.string().min(1, "Title is required."),
  ingredients: z.array(
    z.object({
      name: z.string().min(1),
      amount: z.number(),
      unit: z.string()
    })
  ).min(1, "At least one ingredient is required."),
  instructions: z.array(z.string()).min(1, "At least one instruction is required."),
});

export async function POST(request: NextRequest) {
  try {
    // 1. Authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized. Please log in to save recipes.' }, { status: 401 });
    }
    const userId = session.user.id;

    // 2. Validation
    const body = await request.json();
    const validationResult = saveGeneratedRecipeSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Invalid recipe data.', details: validationResult.error.flatten().fieldErrors },
        { status: 400 }
      );
    }

    const { title, ingredients, instructions } = validationResult.data;

    // 3. Save to Database using Prisma - Updated relations
    console.log(`Saving AI-generated recipe "${title}" for user ${userId}`);

    const newRecipe = await prisma.recipe.create({
      data: {
        title: title,
        source: RecipeSource.AI_GENERATED,
        description: 'Recipe generated by AI.',
        author: {
          connect: { id: userId } // Connect to the existing user
        },
        // Create related Ingredient records
        ingredients: {
          create: ingredients.map(ing => ({
            name: ing.name,
            amount: ing.amount,
            unit: ing.unit,
            // Add default values for other Ingredient fields if needed
          })),
        },
        // Create related Instruction records
        instructions: {
          create: instructions.map((desc, index) => ({
            stepNumber: index + 1,
            description: desc,
            // Add default values for other Instruction fields if needed
          })),
        },
        // Add default/null values for other required Recipe fields if necessary
        // e.g., servings, cookingTime, difficulty, imageUrl, etc.
        // dietaryNotes: { create: {} }, // Create related DietaryNotes if needed
        // nutritionFacts: { create: {} }, // Create related NutritionFacts if needed
      },
      // Include the created ingredients and instructions in the response if desired
      // include: {
      //   ingredients: true,
      //   instructions: true
      // }
    });

    console.log(`Recipe saved with ID: ${newRecipe.id}`);

    return NextResponse.json({ message: 'Recipe saved successfully!', recipeId: newRecipe.id }, { status: 201 });

  } catch (error) {
    console.error("Error saving generated recipe:", error);
    return NextResponse.json({ error: 'Failed to save recipe.' }, { status: 500 });
  }
} 