generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  name               String?
  image              String?
  emailVerified      DateTime?               @map("email_verified")
  accounts           Account[]
  recipes            Recipe[]                @relation("AuthoredRecipes")
  sessions           Session[]
  allergies          UserAllergy[]
  cuisinePreferences UserCuisinePreference[]
  preferences        UserPreference?
  savedRecipes       Recipe[]                @relation("SavedRecipes")
  recipeHistory      UserRecipeHistory[]

  @@map("users")
}

model Recipe {
  id                String   @id @default(cuid())
  title             String
  description       String?
  ingredients       Ingredient[]
  instructions      Instruction[]
  author           User     @relation(fields: [authorId], references: [id])
  authorId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  cookingTime      Int?
  servings         Int?
  difficulty       String?
  cuisineType      String?
  isVegetarian     Boolean? @default(false)
  isVegan          Boolean? @default(false)
  isGlutenFree     Boolean? @default(false)
  isNutFree        Boolean? @default(false)
  isLowFodmap      Boolean? @default(false)
  isPescatarian    Boolean? @default(false)
  isFermented      Boolean? @default(false)
  isLactoseFree    Boolean? @default(false)
  needsDietaryReview Boolean @default(false)
  dietaryFeedback  DietaryFeedback[]
}

model Ingredient {
  id       String  @id @default(cuid())
  name     String
  amount   Float
  unit     String
  notes    String?
  recipeId String
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model Instruction {
  id          String @id @default(cuid())
  stepNumber  Int
  description String
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model NutritionFacts {
  id       String @id @default(cuid())
  protein  Float?
  carbs    Float?
  fat      Float?
  fiber    Float?
  sugar    Float?
  sodium   Float?
  recipeId String @unique
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[] @relation("CategoryToRecipe")
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[] @relation("RecipeToTag")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}
model StandardIngredient {
  id            String        @id @default(cuid())
  name          String        @unique
  category      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userAllergies UserAllergy[]
}

model Cuisine {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  region                 String
  createdAt              DateTime                @default(now())
  imageUrl               String?
  updatedAt              DateTime                @updatedAt
  averagePreparationTime Int
  commonIngredients      String[]
  cookingMethods         String[]
  culturalContext        String?
  description            String?
  dietaryConsiderations  String[]
  difficultyLevel        String
  mealTypes              String[]
  parentCuisineId        String?
  spiceProfile           String[]
  subRegion              String?
  parentCuisine          Cuisine?                @relation("CuisineHierarchy", fields: [parentCuisineId], references: [id])
  subCuisines            Cuisine[]               @relation("CuisineHierarchy")
  recipes                Recipe[]                @relation("CuisineRecipes")
  preferences            UserCuisinePreference[]
  fusionRecipes          Recipe[]                @relation("RecipeFusionCuisines")

  @@index([region, subRegion])
  @@index([name])
}

model UserPreference {
  id            String   @id @default(cuid())
  userEmail     String   @unique
  cookingTime   String   @default("MEDIUM")
  mealPrep      Boolean  @default(false)
  servingSize   Int      @default(2)
  dietTypes     String[] @default([])
  excludedFoods String[] @default([])
  user          User     @relation(fields: [userEmail], references: [email])
}

model UserAllergy {
  id           String             @id @default(cuid())
  ingredientId String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  severity     String
  userEmail    String
  ingredient   StandardIngredient @relation(fields: [ingredientId], references: [id])
  user         User               @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, ingredientId])
}

model UserCuisinePreference {
  id              String   @id @default(cuid())
  cuisineId       String
  preferenceLevel String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userEmail       String
  cuisine         Cuisine  @relation(fields: [cuisineId], references: [id])
  user            User     @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, cuisineId])
}

model RecipeGenerationJob {
  id           String   @id @default(cuid())
  status       String
  totalRecipes Int
  completed    Int      @default(0)
  failed       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  error        String?
  recipes      Recipe[] @relation("JobRecipes")
}

model UserRecipeHistory {
  id        String   @id @default(cuid())
  userEmail String
  recipeId  String
  shownAt   DateTime @default(now())
  user      User     @relation(fields: [userEmail], references: [email])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@index([userEmail, shownAt])
  @@index([recipeId])
}

model DietaryFeedback {
  id                   String   @id @default(cuid())
  recipe               Recipe   @relation(fields: [recipeId], references: [id])
  recipeId             String
  lowFodmapIncorrect   Boolean
  fermentedIncorrect   Boolean
  pescatarianIncorrect Boolean
  comment              String?
  currentAnalysis      Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([recipeId])
}

