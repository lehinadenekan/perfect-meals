generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "foreignKeys"
}

// --- Enum for Recipe Source ---
enum RecipeSource {
  ADMIN // Added by site administrators (for public directory)
  USER_CREATED // Manually created by a regular user
  USER_IMPORTED // Imported via URL by a regular user
  AI_GENERATED // Generated by the AI recipe feature
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  name               String?
  image              String?
  emailVerified      DateTime?               @map("email_verified")
  accounts           Account[]
  albums             Album[]
  recipes            Recipe[]                @relation("AuthoredRecipes")
  sessions           Session[]
  allergies          UserAllergy[]
  cuisinePreferences UserCuisinePreference[]
  preferences        UserPreference?
  recipeHistory      UserRecipeHistory[]
  savedRecipes       Recipe[]                @relation("SavedRecipes")
  customFoodEntries  CustomFoodEntry[] // Added inverse relation
  plannerDays        PlannerDay[] // Added inverse relation for planner

  @@map("users")
}

model Recipe {
  id                  String              @id @default(cuid())
  title               String              @unique
  description         String?
  servings            Int?
  cookingTime         Int?
  difficulty          String? // e.g., Easy, Medium, Hard
  imageUrl            String?
  authorId            String?
  author              User?               @relation("AuthoredRecipes", fields: [authorId], references: [id])
  savedBy             User[]              @relation("SavedRecipes")
  source              RecipeSource        @default(USER_CREATED) // ADMIN, USER_CREATED, USER_IMPORTED
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  ingredients         Ingredient[]
  instructions        Instruction[]
  nutritionFactsId    String?             @unique
  nutritionFacts      NutritionFacts?     @relation("RecipeNutritionFacts")
  plannerMeals        PlannerMeal[]
  dietaryNotesId      String?             @unique
  dietaryNotes        DietaryNotes?       @relation("RecipeDietaryNotes")
  userRecipeHistories UserRecipeHistory[]
  isPublic            Boolean             @default(true) // Default to true for new recipes
  calories            Int?
  protein             Int?
  carbs               Int?
  fat                 Int?
  type                String? // e.g. MAIN, SIDE, DESSERT etc.
  isVegetarian        Boolean?
  isVegan             Boolean?
  isGlutenFree        Boolean?
  isDairyFree         Boolean?
  isNutFree           Boolean?
  isPescatarian       Boolean?
  isLactoseFree       Boolean?
  isLowFodmap         Boolean?
  isSpicy             Boolean?
  isFermented         Boolean?
  cookingStyles       String[] // e.g. ["Baking", "Grilling", "Slow Cooker"]
  mealCategories      String[] // e.g. ["Breakfast", "Lunch", "Dinner", "Snack", "Drink"]
  cuisineId           String?
  cuisine             Cuisine?            @relation("CuisineRecipes", fields: [cuisineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  regions             Region[]            @relation("RecipeRegions")
  categories          Category[]          @relation("CategoryToRecipe")
  reviews             Review[]
  albums              RecipeToAlbum[]
  DietaryFeedback     DietaryFeedback[]
}

model Ingredient {
  id          String  @id @default(cuid())
  name        String
  amount      Float
  unit        String
  notes       String?
  recipeId    String
  isFermented Boolean @default(false)
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([recipeId])
}

model Instruction {
  id          String  @id @default(cuid())
  stepNumber  Int
  description String  @db.Text
  recipeId    String
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  imageUrl    String?

  @@unique([recipeId, stepNumber])
}

model NutritionFacts {
  id       String @id @default(cuid())
  protein  Float?
  carbs    Float?
  fat      Float?
  fiber    Float?
  sugar    Float?
  sodium   Float?
  recipeId String @unique // Foreign key to Recipe
  recipe   Recipe @relation("RecipeNutritionFacts", fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  // Ensure there isn't another field here like `Recipe Recipe[]` or similar causing ambiguity
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[] @relation("CategoryToRecipe")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  // recipes Recipe[] @relation("RecipeToTag") // Removed opposite relation
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([recipeId])
}

model StandardIngredient {
  id            String        @id @default(cuid())
  name          String        @unique
  category      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userAllergies UserAllergy[]
}

model Cuisine {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  region                 String
  createdAt              DateTime                @default(now())
  imageUrl               String?
  updatedAt              DateTime                @updatedAt
  averagePreparationTime Int
  commonIngredients      String[]
  cookingMethods         String[]
  culturalContext        String?
  description            String?
  dietaryConsiderations  String[]
  difficultyLevel        String
  mealTypes              String[]
  parentCuisineId        String?
  spiceProfile           String[]
  subRegion              String?
  parentCuisine          Cuisine?                @relation("CuisineHierarchy", fields: [parentCuisineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subCuisines            Cuisine[]               @relation("CuisineHierarchy")
  preferences            UserCuisinePreference[]
  recipes                Recipe[]                @relation("CuisineRecipes")

  @@index([region, subRegion])
  @@index([name])
}

model UserPreference {
  id               String   @id @default(cuid())
  userEmail        String   @unique
  cookingTime      String   @default("MEDIUM")
  mealPrep         Boolean  @default(false)
  servingSize      Int      @default(2)
  dietTypes        String[] @default([])
  excludedFoods    String[] @default([])
  regions          String[] @default([])
  cookingStyles    String[] @default([])
  mealCategories   String[] @default([])
  dailyProteinGoal Int? // Added for macro tracking
  dailyCarbGoal    Int? // Added for macro tracking
  dailyFatGoal     Int? // Added for macro tracking
  dailyCalorieGoal Int? // Added for macro tracking
  user             User     @relation(fields: [userEmail], references: [email])
}

model UserAllergy {
  id           String             @id @default(cuid())
  ingredientId String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  severity     String
  userEmail    String
  ingredient   StandardIngredient @relation(fields: [ingredientId], references: [id])
  user         User               @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, ingredientId])
}

model UserCuisinePreference {
  id              String   @id @default(cuid())
  cuisineId       String
  preferenceLevel String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userEmail       String
  cuisine         Cuisine  @relation(fields: [cuisineId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user            User     @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, cuisineId])
}

model RecipeGenerationJob {
  id           String   @id @default(cuid())
  status       String
  totalRecipes Int
  completed    Int      @default(0)
  failed       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  error        String?
  // recipes      Recipe[] @relation("JobRecipes") // Removed opposite relation
}

// Added for custom food tracking
model CustomFoodEntry {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  servingSize  String? // e.g., "1 medium", "100g"
  calories     Int?
  protein      Int?
  carbs        Int?
  fat          Int?
  createdAt    DateTime      @default(now())
  plannedMeals PlannerMeal[] // Added inverse relation 

  @@index([userId])
}

// --- End of Custom Food Entry ---

model UserRecipeHistory {
  id        String   @id @default(cuid())
  userEmail String
  recipeId  String
  shownAt   DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user      User     @relation(fields: [userEmail], references: [email])

  @@index([userEmail, shownAt])
  @@index([recipeId])
}

model DietaryFeedback {
  id                   String   @id @default(cuid())
  recipeId             String
  lowFodmapIncorrect   Boolean
  fermentedIncorrect   Boolean
  pescatarianIncorrect Boolean
  comment              String?
  currentAnalysis      Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  recipe               Recipe   @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([recipeId])
}

model Album {
  id          String          @id @default(cuid())
  name        String
  description String?
  coverImage  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  isPublic    Boolean         @default(false)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes     RecipeToAlbum[]

  @@index([userId])
}

model RecipeToAlbum {
  id       String   @id @default(cuid())
  albumId  String
  recipeId String
  addedAt  DateTime @default(now())
  album    Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@unique([albumId, recipeId])
  @@index([albumId])
  @@index([recipeId])
}

model IngredientMapping {
  id               String    @id @default(cuid())
  // The text query from recipe ingredients (e.g., "large onion", "onion", "flour")
  // We might have multiple mappings for similar queries. Index for faster lookups.
  ingredientQuery  String
  // The optimized search term for Amazon Fresh (e.g., "fresh yellow onions")
  amazonSearchTerm String
  // Optional: Specific Amazon Standard Identification Number (ASIN) if known
  amazonAsin       String?
  // How confident are we in this mapping? (Optional, e.g., for prioritizing)
  confidenceScore  Float?
  // When was this mapping last checked/updated? (Optional)
  lastVerifiedAt   DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Optional: Could link back to a standardized ingredient if you have that model
  // standardIngredientId String?
  // standardIngredient   StandardIngredient? @relation(fields: [standardIngredientId], references: [id])

  @@index([amazonSearchTerm]) // Index for potential reverse lookups
  @@index([ingredientQuery]) // Index for faster query lookups
}

// New DietaryNotes model
model DietaryNotes {
  id                      String  @id @default(cuid())
  fermentationInfo        String?
  fodmapInfo              String?
  fodmapModificationTips  String?
  keyNutrients            String?
  antiInflammatoryInfo    String?
  recipeId                String  @unique
  recipe                  Recipe  @relation("RecipeDietaryNotes", fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

// --- Planner Models Start ---

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  OTHER
}

model PlannerDay {
  id     String        @id @default(cuid())
  userId String
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade) // Added onDelete Cascade
  date   DateTime      @db.Date // Store just the date
  notes  String? // Added notes field
  meals  PlannerMeal[]

  @@unique([userId, date])
  @@index([userId])
}

model PlannerMeal {
  id                String           @id @default(cuid())
  plannerDayId      String
  plannerDay        PlannerDay       @relation(fields: [plannerDayId], references: [id], onDelete: Cascade)
  mealType          MealType
  mealTime          String? // Added optional meal time (e.g., "HH:mm")
  recipeId          String?
  recipe            Recipe?          @relation(fields: [recipeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  customFoodEntryId String?
  customFoodEntry   CustomFoodEntry? @relation(fields: [customFoodEntryId], references: [id], onDelete: SetNull) // SetNull on custom food delete
  servings          Float?           @default(1.0)
  isCompleted       Boolean          @default(false)

  // Optional: Add constraint to ensure either recipeId or customFoodEntryId is non-null (handled in application logic)
  @@index([plannerDayId])
  @@index([recipeId])
  @@index([customFoodEntryId])
}

// --- Planner Models End ---

enum RegionType {
  COUNTRY
  SUB_REGION
  CONTINENT
}

model Region {
  id          String      @id @default(cuid())
  name        String      @unique
  type        RegionType? // COUNTRY, SUB_REGION, CONTINENT
  continent   String?     // Name of the parent continent

  // --- Hierarchy relation ---
  parentSubRegionId String?     // Optional: ID of the parent if this is a COUNTRY within a SUB_REGION
  parentSubRegion   Region?     @relation("SubRegionChildren", fields: [parentSubRegionId], references: [id], onDelete: SetNull, onUpdate: Cascade) 
  childCountries    Region[]    @relation("SubRegionChildren") 

  recipes     Recipe[]    @relation("RecipeRegions")
  // Add any other fields you have for Region
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
